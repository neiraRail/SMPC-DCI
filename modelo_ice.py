# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `modelo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SMPC
_M_SMPC = Ice.openModule('SMPC')
__name__ = 'SMPC'

_M_SMPC._t_Servidor = IcePy.defineValue('::SMPC::Servidor', Ice.Value, -1, (), False, True, None, ())

if 'ServidorPrx' not in _M_SMPC.__dict__:
    _M_SMPC.ServidorPrx = Ice.createTempClass()
    class ServidorPrx(Ice.ObjectPrx):

        def entregarDesdeCliente(self, parte, context=None):
            return _M_SMPC.Servidor._op_entregarDesdeCliente.invoke(self, ((parte, ), context))

        def entregarDesdeClienteAsync(self, parte, context=None):
            return _M_SMPC.Servidor._op_entregarDesdeCliente.invokeAsync(self, ((parte, ), context))

        def begin_entregarDesdeCliente(self, parte, _response=None, _ex=None, _sent=None, context=None):
            return _M_SMPC.Servidor._op_entregarDesdeCliente.begin(self, ((parte, ), _response, _ex, _sent, context))

        def end_entregarDesdeCliente(self, _r):
            return _M_SMPC.Servidor._op_entregarDesdeCliente.end(self, _r)

        def entregarDesdeDummy(self, suma, context=None):
            return _M_SMPC.Servidor._op_entregarDesdeDummy.invoke(self, ((suma, ), context))

        def entregarDesdeDummyAsync(self, suma, context=None):
            return _M_SMPC.Servidor._op_entregarDesdeDummy.invokeAsync(self, ((suma, ), context))

        def begin_entregarDesdeDummy(self, suma, _response=None, _ex=None, _sent=None, context=None):
            return _M_SMPC.Servidor._op_entregarDesdeDummy.begin(self, ((suma, ), _response, _ex, _sent, context))

        def end_entregarDesdeDummy(self, _r):
            return _M_SMPC.Servidor._op_entregarDesdeDummy.end(self, _r)

        def finalizar(self, suma, payload, context=None):
            return _M_SMPC.Servidor._op_finalizar.invoke(self, ((suma, payload), context))

        def finalizarAsync(self, suma, payload, context=None):
            return _M_SMPC.Servidor._op_finalizar.invokeAsync(self, ((suma, payload), context))

        def begin_finalizar(self, suma, payload, _response=None, _ex=None, _sent=None, context=None):
            return _M_SMPC.Servidor._op_finalizar.begin(self, ((suma, payload), _response, _ex, _sent, context))

        def end_finalizar(self, _r):
            return _M_SMPC.Servidor._op_finalizar.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SMPC.ServidorPrx.ice_checkedCast(proxy, '::SMPC::Servidor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SMPC.ServidorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SMPC::Servidor'
    _M_SMPC._t_ServidorPrx = IcePy.defineProxy('::SMPC::Servidor', ServidorPrx)

    _M_SMPC.ServidorPrx = ServidorPrx
    del ServidorPrx

    _M_SMPC.Servidor = Ice.createTempClass()
    class Servidor(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SMPC::Servidor')

        def ice_id(self, current=None):
            return '::SMPC::Servidor'

        @staticmethod
        def ice_staticId():
            return '::SMPC::Servidor'

        def entregarDesdeCliente(self, parte, current=None):
            raise NotImplementedError("servant method 'entregarDesdeCliente' not implemented")

        def entregarDesdeDummy(self, suma, current=None):
            raise NotImplementedError("servant method 'entregarDesdeDummy' not implemented")

        def finalizar(self, suma, payload, current=None):
            raise NotImplementedError("servant method 'finalizar' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SMPC._t_ServidorDisp)

        __repr__ = __str__

    _M_SMPC._t_ServidorDisp = IcePy.defineClass('::SMPC::Servidor', Servidor, (), None, ())
    Servidor._ice_type = _M_SMPC._t_ServidorDisp

    Servidor._op_entregarDesdeCliente = IcePy.Operation('entregarDesdeCliente', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), None, ())
    Servidor._op_entregarDesdeDummy = IcePy.Operation('entregarDesdeDummy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Servidor._op_finalizar = IcePy.Operation('finalizar', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_byte, False, 0)), (), None, ())

    _M_SMPC.Servidor = Servidor
    del Servidor

_M_SMPC._t_Dummy = IcePy.defineValue('::SMPC::Dummy', Ice.Value, -1, (), False, True, None, ())

if 'DummyPrx' not in _M_SMPC.__dict__:
    _M_SMPC.DummyPrx = Ice.createTempClass()
    class DummyPrx(Ice.ObjectPrx):

        def entregarDesdeCliente(self, parte, context=None):
            return _M_SMPC.Dummy._op_entregarDesdeCliente.invoke(self, ((parte, ), context))

        def entregarDesdeClienteAsync(self, parte, context=None):
            return _M_SMPC.Dummy._op_entregarDesdeCliente.invokeAsync(self, ((parte, ), context))

        def begin_entregarDesdeCliente(self, parte, _response=None, _ex=None, _sent=None, context=None):
            return _M_SMPC.Dummy._op_entregarDesdeCliente.begin(self, ((parte, ), _response, _ex, _sent, context))

        def end_entregarDesdeCliente(self, _r):
            return _M_SMPC.Dummy._op_entregarDesdeCliente.end(self, _r)

        def entregarDesdeServer(self, parte, context=None):
            return _M_SMPC.Dummy._op_entregarDesdeServer.invoke(self, ((parte, ), context))

        def entregarDesdeServerAsync(self, parte, context=None):
            return _M_SMPC.Dummy._op_entregarDesdeServer.invokeAsync(self, ((parte, ), context))

        def begin_entregarDesdeServer(self, parte, _response=None, _ex=None, _sent=None, context=None):
            return _M_SMPC.Dummy._op_entregarDesdeServer.begin(self, ((parte, ), _response, _ex, _sent, context))

        def end_entregarDesdeServer(self, _r):
            return _M_SMPC.Dummy._op_entregarDesdeServer.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SMPC.DummyPrx.ice_checkedCast(proxy, '::SMPC::Dummy', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SMPC.DummyPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SMPC::Dummy'
    _M_SMPC._t_DummyPrx = IcePy.defineProxy('::SMPC::Dummy', DummyPrx)

    _M_SMPC.DummyPrx = DummyPrx
    del DummyPrx

    _M_SMPC.Dummy = Ice.createTempClass()
    class Dummy(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SMPC::Dummy')

        def ice_id(self, current=None):
            return '::SMPC::Dummy'

        @staticmethod
        def ice_staticId():
            return '::SMPC::Dummy'

        def entregarDesdeCliente(self, parte, current=None):
            raise NotImplementedError("servant method 'entregarDesdeCliente' not implemented")

        def entregarDesdeServer(self, parte, current=None):
            raise NotImplementedError("servant method 'entregarDesdeServer' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SMPC._t_DummyDisp)

        __repr__ = __str__

    _M_SMPC._t_DummyDisp = IcePy.defineClass('::SMPC::Dummy', Dummy, (), None, ())
    Dummy._ice_type = _M_SMPC._t_DummyDisp

    Dummy._op_entregarDesdeCliente = IcePy.Operation('entregarDesdeCliente', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), None, ())
    Dummy._op_entregarDesdeServer = IcePy.Operation('entregarDesdeServer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_int, False, 0),), None, ())

    _M_SMPC.Dummy = Dummy
    del Dummy

# End of module SMPC
