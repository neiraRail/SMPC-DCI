# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `model.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SMPC
_M_SMPC = Ice.openModule('SMPC')
__name__ = 'SMPC'

_M_SMPC._t_Server = IcePy.defineValue('::SMPC::Server', Ice.Value, -1, (), False, True, None, ())

if 'ServerPrx' not in _M_SMPC.__dict__:
    _M_SMPC.ServerPrx = Ice.createTempClass()
    class ServerPrx(Ice.ObjectPrx):

        def messageFromClient(self, part, context=None):
            return _M_SMPC.Server._op_messageFromClient.invoke(self, ((part, ), context))

        def messageFromClientAsync(self, part, context=None):
            return _M_SMPC.Server._op_messageFromClient.invokeAsync(self, ((part, ), context))

        def begin_messageFromClient(self, part, _response=None, _ex=None, _sent=None, context=None):
            return _M_SMPC.Server._op_messageFromClient.begin(self, ((part, ), _response, _ex, _sent, context))

        def end_messageFromClient(self, _r):
            return _M_SMPC.Server._op_messageFromClient.end(self, _r)

        def messageFromDummy(self, sumDummy, context=None):
            return _M_SMPC.Server._op_messageFromDummy.invoke(self, ((sumDummy, ), context))

        def messageFromDummyAsync(self, sumDummy, context=None):
            return _M_SMPC.Server._op_messageFromDummy.invokeAsync(self, ((sumDummy, ), context))

        def begin_messageFromDummy(self, sumDummy, _response=None, _ex=None, _sent=None, context=None):
            return _M_SMPC.Server._op_messageFromDummy.begin(self, ((sumDummy, ), _response, _ex, _sent, context))

        def end_messageFromDummy(self, _r):
            return _M_SMPC.Server._op_messageFromDummy.end(self, _r)

        def finalize(self, sumClient, message, context=None):
            return _M_SMPC.Server._op_finalize.invoke(self, ((sumClient, message), context))

        def finalizeAsync(self, sumClient, message, context=None):
            return _M_SMPC.Server._op_finalize.invokeAsync(self, ((sumClient, message), context))

        def begin_finalize(self, sumClient, message, _response=None, _ex=None, _sent=None, context=None):
            return _M_SMPC.Server._op_finalize.begin(self, ((sumClient, message), _response, _ex, _sent, context))

        def end_finalize(self, _r):
            return _M_SMPC.Server._op_finalize.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SMPC.ServerPrx.ice_checkedCast(proxy, '::SMPC::Server', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SMPC.ServerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SMPC::Server'
    _M_SMPC._t_ServerPrx = IcePy.defineProxy('::SMPC::Server', ServerPrx)

    _M_SMPC.ServerPrx = ServerPrx
    del ServerPrx

    _M_SMPC.Server = Ice.createTempClass()
    class Server(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SMPC::Server')

        def ice_id(self, current=None):
            return '::SMPC::Server'

        @staticmethod
        def ice_staticId():
            return '::SMPC::Server'

        def messageFromClient(self, part, current=None):
            raise NotImplementedError("servant method 'messageFromClient' not implemented")

        def messageFromDummy(self, sumDummy, current=None):
            raise NotImplementedError("servant method 'messageFromDummy' not implemented")

        def finalize(self, sumClient, message, current=None):
            raise NotImplementedError("servant method 'finalize' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SMPC._t_ServerDisp)

        __repr__ = __str__

    _M_SMPC._t_ServerDisp = IcePy.defineClass('::SMPC::Server', Server, (), None, ())
    Server._ice_type = _M_SMPC._t_ServerDisp

    Server._op_messageFromClient = IcePy.Operation('messageFromClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), None, ())
    Server._op_messageFromDummy = IcePy.Operation('messageFromDummy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Server._op_finalize = IcePy.Operation('finalize', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_byte, False, 0)), (), None, ())

    _M_SMPC.Server = Server
    del Server

_M_SMPC._t_Dummy = IcePy.defineValue('::SMPC::Dummy', Ice.Value, -1, (), False, True, None, ())

if 'DummyPrx' not in _M_SMPC.__dict__:
    _M_SMPC.DummyPrx = Ice.createTempClass()
    class DummyPrx(Ice.ObjectPrx):

        def messageFromClient(self, part, context=None):
            return _M_SMPC.Dummy._op_messageFromClient.invoke(self, ((part, ), context))

        def messageFromClientAsync(self, part, context=None):
            return _M_SMPC.Dummy._op_messageFromClient.invokeAsync(self, ((part, ), context))

        def begin_messageFromClient(self, part, _response=None, _ex=None, _sent=None, context=None):
            return _M_SMPC.Dummy._op_messageFromClient.begin(self, ((part, ), _response, _ex, _sent, context))

        def end_messageFromClient(self, _r):
            return _M_SMPC.Dummy._op_messageFromClient.end(self, _r)

        def messageFromServer(self, part, context=None):
            return _M_SMPC.Dummy._op_messageFromServer.invoke(self, ((part, ), context))

        def messageFromServerAsync(self, part, context=None):
            return _M_SMPC.Dummy._op_messageFromServer.invokeAsync(self, ((part, ), context))

        def begin_messageFromServer(self, part, _response=None, _ex=None, _sent=None, context=None):
            return _M_SMPC.Dummy._op_messageFromServer.begin(self, ((part, ), _response, _ex, _sent, context))

        def end_messageFromServer(self, _r):
            return _M_SMPC.Dummy._op_messageFromServer.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SMPC.DummyPrx.ice_checkedCast(proxy, '::SMPC::Dummy', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SMPC.DummyPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SMPC::Dummy'
    _M_SMPC._t_DummyPrx = IcePy.defineProxy('::SMPC::Dummy', DummyPrx)

    _M_SMPC.DummyPrx = DummyPrx
    del DummyPrx

    _M_SMPC.Dummy = Ice.createTempClass()
    class Dummy(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SMPC::Dummy')

        def ice_id(self, current=None):
            return '::SMPC::Dummy'

        @staticmethod
        def ice_staticId():
            return '::SMPC::Dummy'

        def messageFromClient(self, part, current=None):
            raise NotImplementedError("servant method 'messageFromClient' not implemented")

        def messageFromServer(self, part, current=None):
            raise NotImplementedError("servant method 'messageFromServer' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SMPC._t_DummyDisp)

        __repr__ = __str__

    _M_SMPC._t_DummyDisp = IcePy.defineClass('::SMPC::Dummy', Dummy, (), None, ())
    Dummy._ice_type = _M_SMPC._t_DummyDisp

    Dummy._op_messageFromClient = IcePy.Operation('messageFromClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), None, ())
    Dummy._op_messageFromServer = IcePy.Operation('messageFromServer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_int, False, 0),), None, ())

    _M_SMPC.Dummy = Dummy
    del Dummy

# End of module SMPC
